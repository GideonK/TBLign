#!/usr/bin/perl -w
use strict;
use FindBin qw($Bin);
use lib $FindBin::Bin.'/../lib';
use feature 'say';
use DB_File;

use Getopt::Std;
use vars qw /$opt_a $opt_k $opt_t $opt_a/;

getopt('akta');

my $treestatsfile=$opt_t || "../data/db/treestats.db";
my $alignstatsfile=$opt_a || "../data/db/alignstats.db";
my $keysfile=$opt_k || "../data/db/rulekeys.txt";
my $rulesfile=$opt_a || "../data/db/all-rule-values.db";
(my %treestats, my %alignstats, my %rules)=((),(),());
(my @keys, my @values)=((),());

tie (%treestats, "DB_File", "$treestatsfile") || die ("Could not open treebank statistics database ($treestatsfile)!");
tie (%alignstats, "DB_File", "$alignstatsfile") || die ("Could not open alignment statistics database ($alignstatsfile)!");
tie(%rules, "DB_File", "$rulesfile") || die ("Could not open rules database ($rulesfile)!");

my $treesize=keys(%treestats);
my $alignsize=keys(%alignstats);
#my $rulesize=keys(%rules);
if ($treesize == 0) {
  die ("Treebank statistics database file empty! It is useless to continue...exiting.");
}
if ($alignsize == 0) {
  die ("Alignment statistics database file empty! It is useless to continue...exiting.");
}
#if ($rulesize == 0) {
#  die ("Rules database file empty! It is useless to continue...exiting.");
#}

open (KEYS, "<$keysfile") || die ("Could not open rule keys file ($keysfile)!");

while (my $in=<KEYS>) {
  push(@keys,$in);
}
close (KEYS);

buildStructures();

iterate();

#my $size=keys %treestats;
#foreach(keys %treestats) {
#  say "$_\t->\t$treestats{$_}";
#}

sub buildStructures {
  my $count=0;
  foreach (keys %treestats) {
    $count++;
  }
  say $count;
}

sub iterate {

#  foreach (keys %rules) {
#    @values=split(/ /,$rules{$_});
#    foreach (keys %{$treestats{smaxheight}}) {
#      say $_;
#    }
#  }

}

untie %treestats;
untie %alignstats;
untie %rules;

